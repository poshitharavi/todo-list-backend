// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  admin
  employee
}

enum TaskPriority {
  Low
  Medium
  High
}

enum NotificationType {
  task_assigned
  task_completed
}

model Department {
  id    Int    @id @default(autoincrement())
  name  String @unique
  users User[]

  @@map("departments")
}

model User {
  id            Int            @id @default(autoincrement())
  email         String         @unique
  password      String         @map("password")
  firstName     String         @map("first_name")
  lastName      String         @map("last_name")
  department    Department?    @relation(fields: [departmentId], references: [id])
  departmentId  Int?
  role          UserRole
  active        Boolean        @default(true)
  createdTasks  Task[]         @relation("CreatedTasks")
  assignedTasks Task[]         @relation("AssignedTasks")
  notifications Notification[]

  @@index([departmentId], name: "idx_users_department")
  @@map("users")
}

model Task {
  id           Int          @id @default(autoincrement())
  name         String
  description  String?
  priority     TaskPriority
  dueDate      DateTime     @map("due_date")
  createdBy    User         @relation("CreatedTasks", fields: [createdById], references: [id])
  createdById  Int
  assignedTo   User         @relation("AssignedTasks", fields: [assignedToId], references: [id])
  assignedToId Int
  isCompleted  Boolean      @default(false) @map("is_completed")
  createdAt    DateTime     @default(now()) @map("created_at")
  updatedAt    DateTime     @updatedAt @map("updated_at")

  @@index([assignedToId], name: "idx_tasks_assigned_to")
  @@index([dueDate], name: "idx_tasks_due_date")
  @@index([priority], name: "idx_tasks_priority")
  @@map("tasks")
}

model Notification {
  id        Int              @id @default(autoincrement())
  message   String
  type      NotificationType
  isRead    Boolean          @default(false) @map("is_read")
  user      User             @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime         @default(now()) @map("created_at")

  @@index([userId], name: "idx_notifications_user")
  @@map("notifications")
}
